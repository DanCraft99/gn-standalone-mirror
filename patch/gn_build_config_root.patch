diff --git a/action_target_generator.cc b/action_target_generator.cc
index ca3986e..6ce9a82 100644
--- a/action_target_generator.cc
+++ b/action_target_generator.cc
@@ -5,6 +5,8 @@
 #include "tools/gn/action_target_generator.h"
 
 #include "base/stl_util.h"
+#include "base/files/file_path.h"
+#include "base/files/file_util.h"
 #include "tools/gn/build_settings.h"
 #include "tools/gn/err.h"
 #include "tools/gn/filesystem_utils.h"
@@ -109,6 +111,19 @@ bool ActionTargetGenerator::FillScript() {
           scope_->settings()->build_settings()->root_path_utf8());
   if (err_->has_error())
     return false;
+
+  if (!scope_->settings()->build_settings()->build_config_root_path().empty()) {
+    base::FilePath configFilePath = scope_->settings()->build_settings()->GetFullPathBuildConfig(script_file);
+    if (base::PathExists(configFilePath))
+    {
+      std::string p = FilePathToUTF8(configFilePath);
+#if defined(OS_WIN)
+      p = "/" + p;
+#endif
+      script_file = SourceFile(p);
+    }
+  }
+
   target_->action_values().set_script(script_file);
   return true;
 }
diff --git a/bootstrap/'environment.x64 b/bootstrap/'environment.x64
new file mode 100644
index 0000000..6168d8d
Binary files /dev/null and b/bootstrap/'environment.x64 differ
diff --git a/bootstrap/bootstrap.py b/bootstrap/bootstrap.py
index ebc3237..353d5ec 100755
--- a/bootstrap/bootstrap.py
+++ b/bootstrap/bootstrap.py
@@ -950,6 +950,7 @@ def write_gn_ninja(path, root_gen_dir, options, windows_x64_toolchain):
         'base/timer/hi_res_timer_manager_win.cc',
         'base/trace_event/heap_profiler_allocation_register_win.cc',
         'base/trace_event/trace_event_etw_export_win.cc',
+        'base/win/com_init_util.cc',
         'base/win/core_winrt_util.cc',
         'base/win/enum_variant.cc',
         'base/win/event_trace_controller.cc',
diff --git a/bootstrap/build_vs.ninja.template b/bootstrap/build_vs.ninja.template
index 88bba37..ff475e5 100644
--- a/bootstrap/build_vs.ninja.template
+++ b/bootstrap/build_vs.ninja.template
@@ -22,7 +22,7 @@ rule alink_thin
   rspfile_content = ${in_newline}
 
 rule link
-  command = ninja -t msvc -e $arch -- $ld /nologo /OUT:${out} /PDB:${out}.pdb @${out}.rsp
+  command = ninja -t msvc -e $arch -- $ld /nologo /DEBUG /OUT:${out} /PDB:${out}.pdb @${out}.rsp
   description = LINK ${out}
   rspfile = ${out}.rsp
   rspfile_content = ${in_newline} ${libs} ${solibs} ${ldflags}
diff --git a/bootstrap/environment.x64 b/bootstrap/environment.x64
new file mode 100644
index 0000000..d419ac7
Binary files /dev/null and b/bootstrap/environment.x64 differ
diff --git a/build_settings.cc b/build_settings.cc
index 79b8365..5ecd8dd 100644
--- a/build_settings.cc
+++ b/build_settings.cc
@@ -7,6 +7,7 @@
 #include <utility>
 
 #include "base/files/file_util.h"
+#include "base/path_service.h"
 #include "tools/gn/filesystem_utils.h"
 
 BuildSettings::BuildSettings() = default;
@@ -17,6 +18,8 @@ BuildSettings::BuildSettings(const BuildSettings& other)
       secondary_source_path_(other.secondary_source_path_),
       python_path_(other.python_path_),
       build_config_file_(other.build_config_file_),
+      build_config_root_path_(other.build_config_root_path_),
+      build_config_root_path_utf8_(other.build_config_root_path_utf8_),
       arg_file_template_path_(other.arg_file_template_path_),
       build_dir_(other.build_dir_),
       build_args_(other.build_args_) {}
@@ -33,6 +36,20 @@ void BuildSettings::SetRootPath(const base::FilePath& r) {
   root_path_utf8_ = FilePathToUTF8(root_path_);
 }
 
+void BuildSettings::SetBuildConfigRootPath(const base::FilePath& r) {
+  DCHECK(r.value()[r.value().size() - 1] != base::FilePath::kSeparators[0]);
+  if (r == UTF8ToFilePath("GN_INSTALL_PATH"))
+  {
+    PathService::Get(base::DIR_EXE, &build_config_root_path_);
+    build_config_root_path_utf8_ = FilePathToUTF8(build_config_root_path_);
+  }
+  else
+  {
+    build_config_root_path_ = r.NormalizePathSeparatorsTo('/');
+    build_config_root_path_utf8_ = FilePathToUTF8(build_config_root_path_);
+  }
+}
+
 void BuildSettings::SetSecondarySourcePath(const SourceDir& d) {
   secondary_source_path_ = GetFullPath(d).NormalizePathSeparatorsTo('/');
 }
@@ -70,6 +87,21 @@ base::FilePath BuildSettings::GetFullPathSecondary(const std::string& path,
       .NormalizePathSeparatorsTo('/');
 }
 
+base::FilePath BuildSettings::GetFullPathBuildConfig(const SourceFile& file) const
+{
+  return file.Resolve(build_config_root_path_).NormalizePathSeparatorsTo('/');
+}
+
+base::FilePath BuildSettings::BuildSettings::GetFullPathBuildConfig(const SourceDir& dir) const
+{
+  return dir.Resolve(build_config_root_path_).NormalizePathSeparatorsTo('/');
+}
+
+base::FilePath BuildSettings::GetFullPathBuildConfig(const std::string& path, bool as_file) const
+{
+  return ResolvePath(path, as_file, build_config_root_path_).NormalizePathSeparatorsTo('/');
+}
+
 void BuildSettings::ItemDefined(std::unique_ptr<Item> item) const {
   DCHECK(item);
   if (!item_defined_callback_.is_null())
diff --git a/build_settings.h b/build_settings.h
index 52f3625..48817ca 100644
--- a/build_settings.h
+++ b/build_settings.h
@@ -57,6 +57,10 @@ class BuildSettings {
   const SourceFile& build_config_file() const { return build_config_file_; }
   void set_build_config_file(const SourceFile& f) { build_config_file_ = f; }
 
+  const base::FilePath& build_config_root_path() const { return build_config_root_path_; }
+  const std::string& build_config_root_path_utf8() const { return build_config_root_path_utf8_; }
+  void SetBuildConfigRootPath(const base::FilePath& r);
+
   // Path to a file containing the default text to use when running `gn args`.
   const SourceFile& arg_file_template_path() const {
     return arg_file_template_path_;
@@ -95,6 +99,10 @@ class BuildSettings {
   base::FilePath GetFullPathSecondary(const std::string& path,
                                       bool as_file) const;
 
+  base::FilePath GetFullPathBuildConfig(const SourceFile& file) const;
+  base::FilePath GetFullPathBuildConfig(const SourceDir& dir) const;
+  base::FilePath GetFullPathBuildConfig(const std::string& path, bool as_file) const;
+
   // Called when an item is defined from a background thread.
   void ItemDefined(std::unique_ptr<Item> item) const;
   void set_item_defined_callback(ItemDefinedCallback cb) {
@@ -125,6 +133,8 @@ class BuildSettings {
   base::FilePath python_path_;
 
   SourceFile build_config_file_;
+  base::FilePath build_config_root_path_;
+  std::string build_config_root_path_utf8_;
   SourceFile arg_file_template_path_;
   SourceDir build_dir_;
   Args build_args_;
diff --git a/config.cc b/config.cc
index e021fe4..57b8ac6 100644
--- a/config.cc
+++ b/config.cc
@@ -27,6 +27,16 @@ bool Config::OnResolved(Err* err) {
   DCHECK(!resolved_);
   resolved_ = true;
 
+  if (!settings()->build_settings()->build_config_root_path().empty() &&
+       label().name() == "default_include_dirs") {
+     std::string configFilePath =
+         settings()->build_settings()->build_config_root_path_utf8();
+ #if defined(OS_WIN)
+     configFilePath = "/" + configFilePath;
+ #endif
+     own_values_.include_dirs().push_back(SourceDir(configFilePath));
+  }
+
   if (!configs_.empty()) {
     // Subconfigs, flatten.
     //
diff --git a/function_exec_script.cc b/function_exec_script.cc
index 0f6397c..840d9d0 100644
--- a/function_exec_script.cc
+++ b/function_exec_script.cc
@@ -144,6 +144,10 @@ Value RunExecScript(Scope* scope,
     return Value();
   base::FilePath script_path =
       build_settings->GetFullPath(script_source_path, true);
+  if (!build_settings->build_config_root_path().empty() &&
+      !base::PathExists(script_path)) {
+      script_path = build_settings->GetFullPathBuildConfig(script_source_path, true);
+  }
   if (!build_settings->secondary_source_path().empty() &&
       !base::PathExists(script_path)) {
     // Fall back to secondary source root when the file doesn't exist.
diff --git a/function_rebase_path.cc b/function_rebase_path.cc
index 7626551..59dcfd4 100644
--- a/function_rebase_path.cc
+++ b/function_rebase_path.cc
@@ -4,6 +4,8 @@
 
 #include <stddef.h>
 
+#include "base/files/file_path.h"
+#include "base/files/file_util.h"
 #include "tools/gn/build_settings.h"
 #include "tools/gn/filesystem_utils.h"
 #include "tools/gn/functions.h"
@@ -64,12 +66,16 @@ Value ConvertOnePath(const Scope* scope,
 
   if (!value.VerifyTypeIs(Value::STRING, err))
     return result;
+
+  const BuildSettings* build_settings = scope->settings()->build_settings();
   const std::string& string_value = value.string_value();
 
   bool looks_like_dir = ValueLooksLikeDir(string_value);
 
+
   // System-absolute output special case.
-  if (convert_to_system_absolute) {
+  if (convert_to_system_absolute ||
+      !build_settings->build_config_root_path().empty()) {
     base::FilePath system_path;
     if (looks_like_dir) {
       system_path = scope->settings()->build_settings()->GetFullPath(
@@ -83,6 +89,26 @@ Value ConvertOnePath(const Scope* scope,
     if (err->has_error())
       return Value();
 
+    if (!build_settings->build_config_root_path().empty() &&
+        !base::PathExists(system_path)) {
+      base::FilePath system_config_path;
+      if (looks_like_dir) {
+        system_config_path = build_settings->GetFullPathBuildConfig(
+          from_dir.ResolveRelativeDir(value, err,
+            build_settings->build_config_root_path_utf8()));
+      }
+      else {
+        system_config_path = build_settings->GetFullPathBuildConfig(
+          from_dir.ResolveRelativeFile(value, err,
+            build_settings->build_config_root_path_utf8()));
+      }
+      if (err->has_error())
+        return Value();
+
+      if (base::PathExists(system_config_path))
+        system_path = system_config_path;
+    }
+
     result = Value(function, FilePathToUTF8(system_path));
     if (looks_like_dir)
       MakeSlashEndingMatchInput(string_value, &result.string_value());
diff --git a/input_file_manager.cc b/input_file_manager.cc
index 6fe3cae..53126c2 100644
--- a/input_file_manager.cc
+++ b/input_file_manager.cc
@@ -43,19 +43,40 @@ bool DoLoadFile(const LocationRange& origin,
   base::FilePath primary_path = build_settings->GetFullPath(name);
   ScopedTrace load_trace(TraceItem::TRACE_FILE_LOAD, name.value());
   if (!file->Load(primary_path)) {
+    bool found_in_path = false;
     if (!build_settings->secondary_source_path().empty()) {
       // Fall back to secondary source tree.
       base::FilePath secondary_path =
-          build_settings->GetFullPathSecondary(name);
-      if (!file->Load(secondary_path)) {
+        build_settings->GetFullPathSecondary(name);
+      if (!file->Load(secondary_path) && !build_settings->build_config_root_path().empty()) {
         *err = Err(origin, "Can't load input file.",
                    "Unable to load:\n  " +
-                   FilePathToUTF8(primary_path) + "\n"
-                   "I also checked in the secondary tree for:\n  " +
-                   FilePathToUTF8(secondary_path));
+                    FilePathToUTF8(primary_path) + "\n"
+                    "I also checked in the secondary tree for:\n  " +
+                    FilePathToUTF8(secondary_path));
         return false;
       }
-    } else {
+
+      found_in_path = true;
+    }
+
+    // Fall back to build config root
+    if (!found_in_path && !build_settings->build_config_root_path().empty()) {
+      if (!file->Load(build_settings->GetFullPathBuildConfig(name)))
+      {
+        *err = Err(origin, "Can't load input file.",
+                   "Unable to load:\n  " +
+                    FilePathToUTF8(primary_path) + "\n"
+                    "I also checked in the build config tree for:\n  " +
+                    FilePathToUTF8(build_settings->build_config_root_path()));
+        return false;
+      }
+
+      found_in_path = true;  // build_config_root_path
+    }
+
+    if (!found_in_path)
+    {
       *err = Err(origin,
                  "Unable to load \"" + FilePathToUTF8(primary_path) + "\".");
       return false;
diff --git a/setup.cc b/setup.cc
index 36b6ec5..a0ad318 100644
--- a/setup.cc
+++ b/setup.cc
@@ -751,7 +751,19 @@ bool Setup::FillOtherConfig(const base::CommandLine& cmdline) {
     return false;
   }
   build_settings_.set_build_config_file(
-      SourceFile(build_config_value->string_value()));
+    SourceFile(build_config_value->string_value()));
+
+  const Value* build_config_root_value =
+  dotfile_scope_.GetValue("buildconfig_root", true);
+  if (build_config_root_value) {
+    if (!build_config_root_value->VerifyTypeIs(Value::STRING, &err)) {
+      err.PrintToStdout();
+      return false;
+    }
+
+    build_settings_.SetBuildConfigRootPath(
+      UTF8ToFilePath(build_config_root_value->string_value()));
+  }
 
   // Targets to check.
   const Value* check_targets_value =
